// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: celestia/core/v1/gas_estimation/gas_estimator.proto

package gasestimation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GasEstimator_EstimateGasPrice_FullMethodName         = "/celestia.core.v1.gas_estimation.GasEstimator/EstimateGasPrice"
	GasEstimator_EstimateGasPriceAndUsage_FullMethodName = "/celestia.core.v1.gas_estimation.GasEstimator/EstimateGasPriceAndUsage"
)

// GasEstimatorClient is the client API for GasEstimator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GasEstimator estimation service for gas price and gas used.
type GasEstimatorClient interface {
	// estimateGasPrice takes a transaction priority and estimates the gas price
	// based on the gas prices of the transactions in the last five blocks. If no
	// transaction is found in the last five blocks, return the network min gas
	// price. It's up to the light client to set the gas price in this case to the
	// minimum gas price set by that node.
	EstimateGasPrice(ctx context.Context, in *EstimateGasPriceRequest, opts ...grpc.CallOption) (*EstimateGasPriceResponse, error)
	// EstimateGasPriceAndUsage takes a transaction priority and a transaction
	// bytes and estimates the gas price and the gas used for that transaction.
	// The gas price estimation is based on the gas prices of the transactions in
	// the last five blocks. If no transaction is found in the last five blocks,
	// return the network min gas price. It's up to the light client to set the
	// gas price in this case to the minimum gas price set by that node. The gas
	// used is estimated using the state machine simulation.
	EstimateGasPriceAndUsage(ctx context.Context, in *EstimateGasPriceAndUsageRequest, opts ...grpc.CallOption) (*EstimateGasPriceAndUsageResponse, error)
}

type gasEstimatorClient struct {
	cc grpc.ClientConnInterface
}

func NewGasEstimatorClient(cc grpc.ClientConnInterface) GasEstimatorClient {
	return &gasEstimatorClient{cc}
}

func (c *gasEstimatorClient) EstimateGasPrice(ctx context.Context, in *EstimateGasPriceRequest, opts ...grpc.CallOption) (*EstimateGasPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstimateGasPriceResponse)
	err := c.cc.Invoke(ctx, GasEstimator_EstimateGasPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasEstimatorClient) EstimateGasPriceAndUsage(ctx context.Context, in *EstimateGasPriceAndUsageRequest, opts ...grpc.CallOption) (*EstimateGasPriceAndUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstimateGasPriceAndUsageResponse)
	err := c.cc.Invoke(ctx, GasEstimator_EstimateGasPriceAndUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GasEstimatorServer is the server API for GasEstimator service.
// All implementations must embed UnimplementedGasEstimatorServer
// for forward compatibility.
//
// GasEstimator estimation service for gas price and gas used.
type GasEstimatorServer interface {
	// estimateGasPrice takes a transaction priority and estimates the gas price
	// based on the gas prices of the transactions in the last five blocks. If no
	// transaction is found in the last five blocks, return the network min gas
	// price. It's up to the light client to set the gas price in this case to the
	// minimum gas price set by that node.
	EstimateGasPrice(context.Context, *EstimateGasPriceRequest) (*EstimateGasPriceResponse, error)
	// EstimateGasPriceAndUsage takes a transaction priority and a transaction
	// bytes and estimates the gas price and the gas used for that transaction.
	// The gas price estimation is based on the gas prices of the transactions in
	// the last five blocks. If no transaction is found in the last five blocks,
	// return the network min gas price. It's up to the light client to set the
	// gas price in this case to the minimum gas price set by that node. The gas
	// used is estimated using the state machine simulation.
	EstimateGasPriceAndUsage(context.Context, *EstimateGasPriceAndUsageRequest) (*EstimateGasPriceAndUsageResponse, error)
	mustEmbedUnimplementedGasEstimatorServer()
}

// UnimplementedGasEstimatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGasEstimatorServer struct{}

func (UnimplementedGasEstimatorServer) EstimateGasPrice(context.Context, *EstimateGasPriceRequest) (*EstimateGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateGasPrice not implemented")
}
func (UnimplementedGasEstimatorServer) EstimateGasPriceAndUsage(context.Context, *EstimateGasPriceAndUsageRequest) (*EstimateGasPriceAndUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateGasPriceAndUsage not implemented")
}
func (UnimplementedGasEstimatorServer) mustEmbedUnimplementedGasEstimatorServer() {}
func (UnimplementedGasEstimatorServer) testEmbeddedByValue()                      {}

// UnsafeGasEstimatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GasEstimatorServer will
// result in compilation errors.
type UnsafeGasEstimatorServer interface {
	mustEmbedUnimplementedGasEstimatorServer()
}

func RegisterGasEstimatorServer(s grpc.ServiceRegistrar, srv GasEstimatorServer) {
	// If the following call pancis, it indicates UnimplementedGasEstimatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GasEstimator_ServiceDesc, srv)
}

func _GasEstimator_EstimateGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasEstimatorServer).EstimateGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GasEstimator_EstimateGasPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasEstimatorServer).EstimateGasPrice(ctx, req.(*EstimateGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasEstimator_EstimateGasPriceAndUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateGasPriceAndUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasEstimatorServer).EstimateGasPriceAndUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GasEstimator_EstimateGasPriceAndUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasEstimatorServer).EstimateGasPriceAndUsage(ctx, req.(*EstimateGasPriceAndUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GasEstimator_ServiceDesc is the grpc.ServiceDesc for GasEstimator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GasEstimator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "celestia.core.v1.gas_estimation.GasEstimator",
	HandlerType: (*GasEstimatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimateGasPrice",
			Handler:    _GasEstimator_EstimateGasPrice_Handler,
		},
		{
			MethodName: "EstimateGasPriceAndUsage",
			Handler:    _GasEstimator_EstimateGasPriceAndUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "celestia/core/v1/gas_estimation/gas_estimator.proto",
}
