// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: celestia/core/v1/proof/proof.proto

package proof

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ShareProof is an NMT proof that a set of shares exist in a set of rows and a
// Merkle proof that those rows exist in a Merkle tree with a given data root.
type ShareProof struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Data             [][]byte               `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	ShareProofs      []*NMTProof            `protobuf:"bytes,2,rep,name=share_proofs,json=shareProofs,proto3" json:"share_proofs,omitempty"`
	NamespaceId      []byte                 `protobuf:"bytes,3,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	RowProof         *RowProof              `protobuf:"bytes,4,opt,name=row_proof,json=rowProof,proto3" json:"row_proof,omitempty"`
	NamespaceVersion uint32                 `protobuf:"varint,5,opt,name=namespace_version,json=namespaceVersion,proto3" json:"namespace_version,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ShareProof) Reset() {
	*x = ShareProof{}
	mi := &file_celestia_core_v1_proof_proof_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShareProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareProof) ProtoMessage() {}

func (x *ShareProof) ProtoReflect() protoreflect.Message {
	mi := &file_celestia_core_v1_proof_proof_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareProof.ProtoReflect.Descriptor instead.
func (*ShareProof) Descriptor() ([]byte, []int) {
	return file_celestia_core_v1_proof_proof_proto_rawDescGZIP(), []int{0}
}

func (x *ShareProof) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ShareProof) GetShareProofs() []*NMTProof {
	if x != nil {
		return x.ShareProofs
	}
	return nil
}

func (x *ShareProof) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *ShareProof) GetRowProof() *RowProof {
	if x != nil {
		return x.RowProof
	}
	return nil
}

func (x *ShareProof) GetNamespaceVersion() uint32 {
	if x != nil {
		return x.NamespaceVersion
	}
	return 0
}

// RowProof is a Merkle proof that a set of rows exist in a Merkle tree with a
// given data root.
type RowProof struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RowRoots      [][]byte               `protobuf:"bytes,1,rep,name=row_roots,json=rowRoots,proto3" json:"row_roots,omitempty"`
	Proofs        []*Proof               `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty"`
	Root          []byte                 `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	StartRow      uint32                 `protobuf:"varint,4,opt,name=start_row,json=startRow,proto3" json:"start_row,omitempty"`
	EndRow        uint32                 `protobuf:"varint,5,opt,name=end_row,json=endRow,proto3" json:"end_row,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowProof) Reset() {
	*x = RowProof{}
	mi := &file_celestia_core_v1_proof_proof_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowProof) ProtoMessage() {}

func (x *RowProof) ProtoReflect() protoreflect.Message {
	mi := &file_celestia_core_v1_proof_proof_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowProof.ProtoReflect.Descriptor instead.
func (*RowProof) Descriptor() ([]byte, []int) {
	return file_celestia_core_v1_proof_proof_proto_rawDescGZIP(), []int{1}
}

func (x *RowProof) GetRowRoots() [][]byte {
	if x != nil {
		return x.RowRoots
	}
	return nil
}

func (x *RowProof) GetProofs() []*Proof {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *RowProof) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *RowProof) GetStartRow() uint32 {
	if x != nil {
		return x.StartRow
	}
	return 0
}

func (x *RowProof) GetEndRow() uint32 {
	if x != nil {
		return x.EndRow
	}
	return 0
}

// NMTProof is a proof of a namespace.ID in an NMT.
// In case this proof proves the absence of a namespace.ID
// in a tree it also contains the leaf hashes of the range
// where that namespace would be.
type NMTProof struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Start index of this proof.
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// End index of this proof.
	End int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	// Nodes that together with the corresponding leaf values can be used to
	// recompute the root and verify this proof. Nodes should consist of the max
	// and min namespaces along with the actual hash, resulting in each being 48
	// bytes each
	Nodes [][]byte `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// leafHash are nil if the namespace is present in the NMT. In case the
	// namespace to be proved is in the min/max range of the tree but absent, this
	// will contain the leaf hash necessary to verify the proof of absence. Leaf
	// hashes should consist of the namespace along with the actual hash,
	// resulting 40 bytes total.
	LeafHash      []byte `protobuf:"bytes,4,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NMTProof) Reset() {
	*x = NMTProof{}
	mi := &file_celestia_core_v1_proof_proof_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NMTProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NMTProof) ProtoMessage() {}

func (x *NMTProof) ProtoReflect() protoreflect.Message {
	mi := &file_celestia_core_v1_proof_proof_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NMTProof.ProtoReflect.Descriptor instead.
func (*NMTProof) Descriptor() ([]byte, []int) {
	return file_celestia_core_v1_proof_proof_proto_rawDescGZIP(), []int{2}
}

func (x *NMTProof) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *NMTProof) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *NMTProof) GetNodes() [][]byte {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NMTProof) GetLeafHash() []byte {
	if x != nil {
		return x.LeafHash
	}
	return nil
}

// Proof is taken from the merkle package
type Proof struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Index         int64                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	LeafHash      []byte                 `protobuf:"bytes,3,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
	Aunts         [][]byte               `protobuf:"bytes,4,rep,name=aunts,proto3" json:"aunts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Proof) Reset() {
	*x = Proof{}
	mi := &file_celestia_core_v1_proof_proof_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_celestia_core_v1_proof_proof_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_celestia_core_v1_proof_proof_proto_rawDescGZIP(), []int{3}
}

func (x *Proof) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Proof) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Proof) GetLeafHash() []byte {
	if x != nil {
		return x.LeafHash
	}
	return nil
}

func (x *Proof) GetAunts() [][]byte {
	if x != nil {
		return x.Aunts
	}
	return nil
}

var File_celestia_core_v1_proof_proof_proto protoreflect.FileDescriptor

const file_celestia_core_v1_proof_proof_proto_rawDesc = "" +
	"\n" +
	"\"celestia/core/v1/proof/proof.proto\x12\x16celestia.core.v1.proof\"\xf4\x01\n" +
	"\n" +
	"ShareProof\x12\x12\n" +
	"\x04data\x18\x01 \x03(\fR\x04data\x12C\n" +
	"\fshare_proofs\x18\x02 \x03(\v2 .celestia.core.v1.proof.NMTProofR\vshareProofs\x12!\n" +
	"\fnamespace_id\x18\x03 \x01(\fR\vnamespaceId\x12=\n" +
	"\trow_proof\x18\x04 \x01(\v2 .celestia.core.v1.proof.RowProofR\browProof\x12+\n" +
	"\x11namespace_version\x18\x05 \x01(\rR\x10namespaceVersion\"\xa8\x01\n" +
	"\bRowProof\x12\x1b\n" +
	"\trow_roots\x18\x01 \x03(\fR\browRoots\x125\n" +
	"\x06proofs\x18\x02 \x03(\v2\x1d.celestia.core.v1.proof.ProofR\x06proofs\x12\x12\n" +
	"\x04root\x18\x03 \x01(\fR\x04root\x12\x1b\n" +
	"\tstart_row\x18\x04 \x01(\rR\bstartRow\x12\x17\n" +
	"\aend_row\x18\x05 \x01(\rR\x06endRow\"e\n" +
	"\bNMTProof\x12\x14\n" +
	"\x05start\x18\x01 \x01(\x05R\x05start\x12\x10\n" +
	"\x03end\x18\x02 \x01(\x05R\x03end\x12\x14\n" +
	"\x05nodes\x18\x03 \x03(\fR\x05nodes\x12\x1b\n" +
	"\tleaf_hash\x18\x04 \x01(\fR\bleafHash\"f\n" +
	"\x05Proof\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x03R\x05total\x12\x14\n" +
	"\x05index\x18\x02 \x01(\x03R\x05index\x12\x1b\n" +
	"\tleaf_hash\x18\x03 \x01(\fR\bleafHash\x12\x14\n" +
	"\x05aunts\x18\x04 \x03(\fR\x05auntsB/Z-github.com/celestiaorg/celestia-app/pkg/proofb\x06proto3"

var (
	file_celestia_core_v1_proof_proof_proto_rawDescOnce sync.Once
	file_celestia_core_v1_proof_proof_proto_rawDescData []byte
)

func file_celestia_core_v1_proof_proof_proto_rawDescGZIP() []byte {
	file_celestia_core_v1_proof_proof_proto_rawDescOnce.Do(func() {
		file_celestia_core_v1_proof_proof_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_celestia_core_v1_proof_proof_proto_rawDesc), len(file_celestia_core_v1_proof_proof_proto_rawDesc)))
	})
	return file_celestia_core_v1_proof_proof_proto_rawDescData
}

var file_celestia_core_v1_proof_proof_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_celestia_core_v1_proof_proof_proto_goTypes = []any{
	(*ShareProof)(nil), // 0: celestia.core.v1.proof.ShareProof
	(*RowProof)(nil),   // 1: celestia.core.v1.proof.RowProof
	(*NMTProof)(nil),   // 2: celestia.core.v1.proof.NMTProof
	(*Proof)(nil),      // 3: celestia.core.v1.proof.Proof
}
var file_celestia_core_v1_proof_proof_proto_depIdxs = []int32{
	2, // 0: celestia.core.v1.proof.ShareProof.share_proofs:type_name -> celestia.core.v1.proof.NMTProof
	1, // 1: celestia.core.v1.proof.ShareProof.row_proof:type_name -> celestia.core.v1.proof.RowProof
	3, // 2: celestia.core.v1.proof.RowProof.proofs:type_name -> celestia.core.v1.proof.Proof
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_celestia_core_v1_proof_proof_proto_init() }
func file_celestia_core_v1_proof_proof_proto_init() {
	if File_celestia_core_v1_proof_proof_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_celestia_core_v1_proof_proof_proto_rawDesc), len(file_celestia_core_v1_proof_proof_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_celestia_core_v1_proof_proof_proto_goTypes,
		DependencyIndexes: file_celestia_core_v1_proof_proof_proto_depIdxs,
		MessageInfos:      file_celestia_core_v1_proof_proof_proto_msgTypes,
	}.Build()
	File_celestia_core_v1_proof_proof_proto = out.File
	file_celestia_core_v1_proof_proof_proto_goTypes = nil
	file_celestia_core_v1_proof_proof_proto_depIdxs = nil
}
